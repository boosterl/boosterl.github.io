<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The world beyond Linux</title>
    <link>https://worldbeyondlinux.be/</link>
    <description>Recent content on The world beyond Linux</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 12 Mar 2025 13:55:34 +0100</lastBuildDate>
    <atom:link href="https://worldbeyondlinux.be/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Playing around with Gentoo on riscv32</title>
      <link>https://worldbeyondlinux.be/posts/play-with-gentoo-rv32/</link>
      <pubDate>Wed, 12 Mar 2025 13:55:34 +0100</pubDate>
      <guid>https://worldbeyondlinux.be/posts/play-with-gentoo-rv32/</guid>
      <description>&lt;p&gt;Since the first time I learned about the existence of RISC-V, I have been&#xA;fascinated by it. I wanted to run operating systems on it, and try out software&#xA;on the ISA.&lt;/p&gt;&#xA;&lt;p&gt;In the beginning this was made possible by emulation, and the last years I&#xA;treated myself with two physical pieces of RISC-V hardware. But these means&#xA;of playing around with RISC-V had a thing in common; it was using the 64-bit&#xA;version of the ISA (riscv64).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Flash an ESP8266 Using a Raspberry Pi</title>
      <link>https://worldbeyondlinux.be/posts/flash-esp8266-using-raspberry-pi2/</link>
      <pubDate>Mon, 23 Dec 2024 17:50:44 +0100</pubDate>
      <guid>https://worldbeyondlinux.be/posts/flash-esp8266-using-raspberry-pi2/</guid>
      <description>&lt;p&gt;In this guide I will be explaining how I flash an ESP8266 chip using a&#xA;Raspberry Pi. More specifically; a Raspberry Pi 2. But any model with GPIO pins&#xA;will do. In this guide I will be flashing &lt;a href=&#34;https://micropython.org/&#34;&gt;MicroPython&lt;/a&gt;&#xA;on the chip.&lt;/p&gt;&#xA;&lt;p&gt;First of all an important clarification; when I&amp;rsquo;m talking about an ESP8266, I&#xA;actually mean an ESP12F mounted on a development board with no USB-port or&#xA;buttons to go into flash-mode. The difference in versions of an ESP8266 was not&#xA;that clear to me in the beginning. But now it&amp;rsquo;s a bit more clear to me.&#xA;Basically it comes down to this; ESP8266 is the actual SoC, this is then mounted&#xA;on a module, which contains an antenna etc. Example of these modules are; ESP12F&#xA;and ESP12E. This combination can then be used on a development board. This&#xA;development board can contain breadboard pins, a USB connector, buttons to go&#xA;into flash mode etc. My module only contains breadboard pins. This is why I was&#xA;struggling in the beginning of using this chip to actually being able to flash&#xA;something on it. But now I know how I can flash something on the chip only using&#xA;some basic electronic components and a Raspberry Pi I had lying around.&lt;/p&gt;</description>
    </item>
    <item>
      <title>GPIO on the MangoPi MQ-Pro</title>
      <link>https://worldbeyondlinux.be/posts/gpio-on-the-mango-pi/</link>
      <pubDate>Sat, 03 Jun 2023 13:37:07 +0200</pubDate>
      <guid>https://worldbeyondlinux.be/posts/gpio-on-the-mango-pi/</guid>
      <description>&lt;p&gt;One of the last aspects I wanted to explore and get working on my MangoPi&#xA;MQ-Pro, is GPIO. For this experiment, like my previous endeavor&#xA;&lt;a href=&#34;https://worldbeyondlinux.be/posts/bluetooth-on-the-mango-pi/&#34;&gt;trying out Bluetooth on my MangoPi MQ-Pro&lt;/a&gt;,&#xA;I used the &lt;a href=&#34;https://ubuntu.com/download/risc-v&#34;&gt;Ubuntu 22.10 RISC-V image for the SiPeed LicheeRV Dock&lt;/a&gt;&#xA;image.&lt;/p&gt;&#xA;&lt;p&gt;No extra configuration is needed to get GPIO working with this image on the&#xA;MangoPi MQ-Pro. I tried out three different ways of accessing the GPIO pins;&#xA;using legacy sysfs-based access, using the userspace GPIO driver, and lastly&#xA;using lgpio from Python.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setting up Bluetooth on the MangoPi MQ-Pro, and testing it out with a Bluetooth access point</title>
      <link>https://worldbeyondlinux.be/posts/bluetooth-on-the-mango-pi/</link>
      <pubDate>Sat, 25 Mar 2023 17:17:55 +0100</pubDate>
      <guid>https://worldbeyondlinux.be/posts/bluetooth-on-the-mango-pi/</guid>
      <description>&lt;p&gt;I received my MangoPi MQ-Pro a few months ago, and was very eager to test out&#xA;all the hardware which I use the most on SBC&amp;rsquo;s. Bluetooth is not one of the&#xA;features I use a lot on SBC&amp;rsquo;s. But after having tested out a lot of operating&#xA;systems and hardware features of the board, I decided to also try and see what&#xA;the status of Bluetooth on the board was.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Exploring non-Linux Based Operating Systems on Allwinner D1</title>
      <link>https://worldbeyondlinux.be/posts/exploring-non-linux-oses-on-d1/</link>
      <pubDate>Mon, 31 Oct 2022 16:28:12 +0100</pubDate>
      <guid>https://worldbeyondlinux.be/posts/exploring-non-linux-oses-on-d1/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&lt;p&gt;As of writing this article, there are a few choices of operating systems to choose from for the Allwinner D1.&#xA;In the future, more choices will probably become available.&#xA;In this article we will take a closer look into &lt;a href=&#34;https://github.com/freebsd-d1/freebsd-d1&#34;&gt;FreeBSD&lt;/a&gt; and &lt;a href=&#34;https://github.com/michaelengel/xv6-d1&#34;&gt;xv6&lt;/a&gt; for the Allwinner D1.&#xA;I will use a &lt;a href=&#34;https://mangopi.org/mangopi_mqpro&#34;&gt;MangoPi MQ-Pro&lt;/a&gt; to test these operating systems.&lt;/p&gt;&#xA;&lt;h1 id=&#34;freebsd&#34;&gt;FreeBSD&lt;/h1&gt;&#xA;&lt;p&gt;For many people, FreeBSD won&amp;rsquo;t need an introduction.&#xA;FreeBSD is a free and open-source Unix-like operating system first released in 1993.&#xA;To create an image ready to flash on an SD card, access to a FreeBSD (virtual) machine is recommended.&#xA;On this machine, the &lt;a href=&#34;https://github.com/freebsd-d1/freebsd-d1/blob/main/README.md&#34;&gt;readme&lt;/a&gt; of the project can be followed.&#xA;This will result in a &lt;code&gt;freebsd-d1.img&lt;/code&gt;-img file in the working directory.&#xA;This image can then be flashed on an SD card in the usual fashion; &lt;code&gt;dd if=freebsd-d1.img of=/dev/&amp;lt;SD card location&amp;gt;&lt;/code&gt;.&#xA;When inserting the image, and starting your board, a serial connection will also be necessary, because as far as I can tell, and at the moment of writing this article, no HDMI-support is present.&#xA;I used a Raspberry Pi to open a serial console, more information on how I did this, can be found in &lt;a href=&#34;https://worldbeyondlinux.be/posts/how-to-use-a-pi-instead-of-a-usb-console-cable&#34;&gt;this&lt;/a&gt; article.&#xA;After staring up the board with an open console, you should be greeted with a FreeBSD login screen:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Running x86_64 Software on RISC-V Using Box64</title>
      <link>https://worldbeyondlinux.be/posts/running-x86-64-software-on-riscv-using-box64/</link>
      <pubDate>Mon, 19 Sep 2022 18:44:12 +0200</pubDate>
      <guid>https://worldbeyondlinux.be/posts/running-x86-64-software-on-riscv-using-box64/</guid>
      <description>&lt;p&gt;In this post I will give an overview on how a ran some software compiled for x86_64 on my RISC-V SBC, a &lt;a href=&#34;https://mangopi.cc/mangopi_mqpro&#34;&gt;MangoPi MQ-Pro&lt;/a&gt;.&#xA;We will be using an awesome piece of software called &lt;a href=&#34;https://github.com/ptitSeb/box64/&#34;&gt;Box64&lt;/a&gt;.&#xA;Basically this software runs x86_64 binaries through an emulator, but with a twist; it uses the native versions of some &amp;ldquo;system&amp;rdquo; libraries, like libc, libm, SDL, and OpenGL, like described in the README of the project:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Since Box64 uses the native versions of some &amp;#34;system&amp;#34; libraries, like libc,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libm, SDL, and OpenGL, it&amp;#39;s easy to integrate and use with most applications,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;and performance can be surprisingly high in many cases.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I have already tried the software on my RaspberryPi, both on an aarch64 and armv7 kernel (for the armv7 kernel, I used &lt;a href=&#34;https://github.com/ptitSeb/box86&#34;&gt;Box86&lt;/a&gt;, which is for 32bit applications), but I saw Box64 was not limited to the ARM architecture. Other architectures like PowerPC 64 LE, LoongArch and, the one we are interested in, RISC-V, are also supported. So I decided to take it for a spin on my MangoPi MQ-Pro.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Use a Raspberry Pi Instead of a USB Console Cable</title>
      <link>https://worldbeyondlinux.be/posts/how-to-use-a-pi-instead-of-a-usb-console-cable/</link>
      <pubDate>Sun, 28 Aug 2022 11:39:44 +0200</pubDate>
      <guid>https://worldbeyondlinux.be/posts/how-to-use-a-pi-instead-of-a-usb-console-cable/</guid>
      <description>&lt;p&gt;As the title says, this article will be about using a Raspberry Pi SBC (whatever model), instead of a USB Console Cable to debug another SBC, router, microcontroller&amp;hellip; The need for this came when I received my &lt;a href=&#34;https://mangopi.cc/mangopi_mqpro&#34;&gt;MangoPi MQ-Pro&lt;/a&gt;, I wanted to try different operating systems for this SBC, but I didn&amp;rsquo;t have access to a USB Console Cable, at least not one that was 3.3V tolerant. I wanted to have access to the serial console because a lot of OS images for the MangoPi, at the time of writing this article, didn&amp;rsquo;t have HDMI drivers. I have already used a Raspberry Pi to flash and interact with micropython on an ESP8266, so I thought, why not use the same method to interact with my new MangoPi.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to run the Apache webserver on a five year old Android smartwatch</title>
      <link>https://worldbeyondlinux.be/posts/how-to-run-apache-on-a-smartwatch/</link>
      <pubDate>Sat, 30 Nov 2019 11:53:16 +0100</pubDate>
      <guid>https://worldbeyondlinux.be/posts/how-to-run-apache-on-a-smartwatch/</guid>
      <description>&lt;p&gt;The first question you might ask yourself when reading the title of this article is; why would you want to this. My answer to that question is, why wouldn&amp;rsquo;t you?&lt;/p&gt;&#xA;&lt;p&gt;I like using technology in ways that makes my live easier. That&amp;rsquo;s why I bought my Motorola Moto 360 in the first place, more than five years ago. It has indeed made my life easier in a few ways, quickly reading a message, discarding when necessary, or pulling out my phone when I need/want to reply. Also controlling my music, checking of a shopping list in the supermarket, even making a quick calculation with the built-in calculator. All these things made me really like my smartwacth. I could live without it more easily than my phone, but still, I wear it almost every day.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How I Run My Blog Using Github Pages and Hugo</title>
      <link>https://worldbeyondlinux.be/posts/how-i-run-my-blog-using-github-pages-and-hugo/</link>
      <pubDate>Sat, 27 Jul 2019 12:51:45 +0000</pubDate>
      <guid>https://worldbeyondlinux.be/posts/how-i-run-my-blog-using-github-pages-and-hugo/</guid>
      <description>&lt;p&gt;For my blog I&amp;rsquo;m using Github pages to host the static content generated by Hugo. Hugo is a static site generator which creates web pages from markdown files you write. That way, when you don&amp;rsquo;t want to be bothered with styling your blog, you can just choose a theme from a vast collection, and you&amp;rsquo;re done. Just write some posts in markdown run the &lt;code&gt;hugo&lt;/code&gt; command, and you will find all the static content in the &lt;code&gt;public&lt;/code&gt; directory, ready to deploy to a web server, or, in my case, Github pages.&lt;/p&gt;</description>
    </item>
    <item>
      <title>About</title>
      <link>https://worldbeyondlinux.be/about/</link>
      <pubDate>Sun, 14 Jul 2019 12:24:53 +0200</pubDate>
      <guid>https://worldbeyondlinux.be/about/</guid>
      <description>&lt;p&gt;Hello, this is a page about me.&lt;/p&gt;</description>
    </item>
    <item>
      <title>My First Post</title>
      <link>https://worldbeyondlinux.be/posts/my-first-post/</link>
      <pubDate>Wed, 24 Apr 2019 21:12:51 +0200</pubDate>
      <guid>https://worldbeyondlinux.be/posts/my-first-post/</guid>
      <description>&lt;p&gt;Hello there, this is my first blog post. Let me first start by saying a few words about myself, my name is Bram Oosterlynck and I was born in Belgium. In my free time I like to do a lot of stuff, camping, hiking, road trips, etc. But this blog will be about something else I love doing in my free time. I love playing around with technology, and that is what this blog will be about.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
